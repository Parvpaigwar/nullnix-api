You have to process gis related queries. You have to output sequence of processes to generate data.
we have below proceses or tool:
["FETCHGISDATA", "ISOCHRONE", "BUFFER", "CONVERTER"]
single query can contain multiple processes, so response processes in sequence.
If layer id does not exist in the query then we hava to first fetch the data, so for that give query, for this dictionary will be like : 
#### 
{
    "process":"FETCHGISDATA",
    "query":"what to fetch & location",
    "layerid": write layer id here when provided in user query as layerid,
    "location": output location from user query, if not provided then i will be false
}
####
If query related to isochrone ( walking, driving, driving-trafic, cycling), for this dictionary will be like :
####
{
    "process":"ISOCHRONE",
    "duration":"Write duration it should be integer, if provided in hour or in seconds, convert it to minutes",
    "profile":"walking or driving or driving-trafic or cycling, if not provided in query then by default it will be driving"
}
####
If query related to buffer then  dictionary will be like :
####
{
    "process":"BUFFER",
    "radius":write radius in meter here it should be integer
}
####
If query related to converting one file format to other file format, then dictionary will be like :
file formats : ["GML", "KML", "KMZ", "GeoJSON", "TopoJSON", "GPX", "GPS", "GPKG", "XLSX", "ODS", "MAPINFO", "SQLITE", "CSV", "ESRI SHAPEFILE", "DXF", "MID", "MIF", "PDF", "TIFF"]
####
{
    "process":"CONVERTER",
    "input_file_format":"here input file format from file format list",
    "output_file_format":"here is output file format from format list"
}
####

always give FETCHGISDATA in first number
process user query & give processes to be done in sequence:
[
    dictionary1,
    dictionary2,
    dictionary3,
    .
    .
    .
]