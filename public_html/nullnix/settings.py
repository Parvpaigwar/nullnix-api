"""
Django settings for nullnix project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
import environ


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-6a=jp-ow8nx17wdsc$14g7it8iqh^pw9(h5!6j-nz_1v8k%4ja"

# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
SECRET_KEY = env('SECRET_KEY', default='unsafe-secret-key')
DEBUG = env('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = ['nullnix-api.onrender.com','127.0.0.1:8000','127.0.0.1']
# ALLOWED_HOSTS = ['nullnix.sgp.dom.my.id', 'www.nullnix.sgp.dom.my.id']
CORS_ALLOW_ALL_ORIGINS = True  # or use whitelist below

CORS_ALLOWED_ORIGINS = [
    "https://nullnix.xyz",  # your frontend domain
]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party
    'rest_framework',
    'corsheaders',

    # Your app
    'users',
    'rest_framework_simplejwt',
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # Must be first!
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'nullnix.user_middleware.CaptureRequestBodyMiddleware',
    'nullnix.user_middleware.UserMiddleware',
]


ROOT_URLCONF = "nullnix.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "nullnix.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

from decouple import config

DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env('DB_NAME'),
            'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'),
            'HOST': env('DB_HOST'),
            'PORT': env('DB_PORT'),
        }
    }

import os

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOW_ALL_ORIGINS = True



import os

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}



import os

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')



# JWT Settings
JWT_SUPERADMIN_SECRET = env('JWT_SUPERADMIN_SECRET', default='superadmin-default-secret-key-change-in-production')
JWT_USER_SECRET = env('JWT_USER_SECRET', default='user-default-secret-key-change-in-production')
FRONTEND_URL = env('FRONTEND_URL', default='http://localhost:8100')






# """
# Django settings for igismap project.

# Generated by 'django-admin startproject' using Django 4.0.3.

# For more information on this file, see
# https://docs.djangoproject.com/en/4.0/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/4.0/ref/settings/
# """

# from pathlib import Path
# import os
# import environ
# import redis
# # Initialize environ
# env = environ.Env()
# # Set the project base directory
# BASE_DIR = Path(__file__).resolve().parent.parent
# # Take environment variables from .env file
# environ.Env.read_env(os.path.join(os.path.dirname(__file__), '.env'))

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# TEMPLATE_DIR = os.path.join(BASE_DIR,'templates')
# STATIC_DIR = os.path.join(BASE_DIR,'static')


# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = env('SECRET_KEY', default='your-secret-key-here')

# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = env.bool('DEBUG', default=True)

# ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['*'])

# # CORS settings
# CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOW_CREDENTIALS = True

# # Add specific methods
# CORS_ALLOW_METHODS = [
#     'GET',
#     'POST',
#     'OPTIONS',
#     'PUT',
#     'DELETE',
#     'PATCH',
# ]

# # Keep the expanded headers
# CORS_ALLOW_HEADERS = [
#     '*'  # Allow all headers
# ]

# # Add specific preflight settings
# CORS_PREFLIGHT_MAX_AGE = 86400
# CORS_HANDLE_OPTIONS = True

# # Add specific response headers
# CORS_EXPOSE_HEADERS = [
#     'Content-Type', 
#     'X-CSRFToken',
#     'Authorization',
#     'Access-Control-Allow-Origin',
#     'Access-Control-Allow-Credentials',
#     'Access-Control-Allow-Methods',
#     'Access-Control-Allow-Headers'
# ]

# # Make sure OPTIONS requests are handled
# CORS_ALLOW_OPTIONS = True

# # Disable CSRF for testing (only temporarily!)
# CSRF_COOKIE_SECURE = False
# SESSION_COOKIE_SECURE = False
# CSRF_COOKIE_SAMESITE = None
# SESSION_COOKIE_SAMESITE = None

# # Update middleware order - make sure CORS is first
# MIDDLEWARE = [
#     'corsheaders.middleware.CorsMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.security.SecurityMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
#     'igismap.superadmin_middleware.SuperAdminMiddleware',
#     'igismap.user_middleware.CaptureRequestBodyMiddleware',
#     'igismap.user_middleware.UserMiddleware',
# ]

# # Add these trusted origins
# CSRF_TRUSTED_ORIGINS = [
#     'http://localhost:8100',
#     'http://localhost:4200',
#     'https://teststory.mapog.com',
#     'http://teststory.mapog.com'
# ]

# # Allow all hosts for testing
# ALLOWED_HOSTS = ['*']

# # Application definition

# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'django.contrib.postgres',
#     'corsheaders',
#     'drf_yasg',
#     'rest_framework',
# #    'channels',
#     # 'igismapapp',
#     'territory_design_app',
#     'bearing_angle_app',
#     'mobile_data_collection_app',
#     'pricing_app',
#     'django_crontab',
#     'superadmin',
#     'user_company',
#     'story',
#     'maps',
#     'layers',
#     'gisdata',
#     'external_api',
#     'log',
# ]


# ROOT_URLCONF = 'igismap.urls'

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [TEMPLATE_DIR],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]

# WSGI_APPLICATION = 'igismap.wsgi.application'

# # Database
# # https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.contrib.gis.db.backends.postgis',
#         'NAME': env('DB_NAME'),
#         'USER': env('DB_USER'),
#         'PASSWORD': env('DB_PASSWORD'),
#         'HOST': env('DB_HOST'),
#         'PORT': env('DB_PORT'),
#     }
# }

# # Password validation
# # https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]


# # Internationalization
# # https://docs.djangoproject.com/en/4.0/topics/i18n/

# LANGUAGE_CODE = env('LANGUAGE_CODE', default='en-us')

# TIME_ZONE = env('TIME_ZONE', default='UTC')

# USE_I18N = env.bool('USE_I18N', default=True)

# USE_TZ = env.bool('USE_TZ', default=True)


# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/4.0/howto/static-files/

# STATIC_URL = env('STATIC_URL', default='static/')

# STATICFILES_DIRS = [
#     STATIC_DIR,
# ]

# # Default primary key field type
# # https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# #Added manually by Jay 24june2022
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = env('EMAIL_HOST')
# EMAIL_PORT = env.int('EMAIL_PORT')
# EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS')
# EMAIL_HOST_USER = env('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
# DEFAULT_FROM_EMAIL = 'MAPOG <noreply@mapog.com>'

# #Managing Media
# # MEDIA_ROOT = os.getenv('MEDIA_ROOT', os.path.join(BASE_DIR, 'media'))
# # MEDIA_URL = env('MEDIA_URL', default='')
# MEDIA_ROOT = os.path.join(BASE_DIR, '')
# MEDIA_URL= ''

# # Set maximum upload size to 100MB (default is 2.5MB)
# DATA_UPLOAD_MAX_MEMORY_SIZE = env.int('DATA_UPLOAD_MAX_MEMORY_SIZE', default=2048576000)  # 100MB in bytes

# # Amazon S3 Cred
# BUCKET = env('AWS_BUCKET')
# INVOICE_BUCKET = env('AWS_INVOICE_BUCKET')
# ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
# SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
# REGION = env('AWS_REGION')

# LOCAL_SUPER_ADMIN = env.int('LOCAL_SUPER_ADMIN', default=16)

# # Stripe key 

# STRIPE_API_KEY = env('STRIPE_API_KEY')


# # Geoserver Settings
# GEOSERVER_USER = env('GEOSERVER_USER')
# GEOSERVER_PASSWORD = env('GEOSERVER_PASSWORD') 
# GEOSERVER_URL = env('GEOSERVER_URL')
# GEOSERVER_AUTHKEY = env('GEOSERVER_AUTHKEY')

# GIS_DATA_GEOSERVER_USER = env('GEOSERVER_USER')
# GIS_DATA_GEOSERVER_PASSWORD = env('GEOSERVER_PASSWORD')
# GIS_DATA_GEOSERVER_URL = env('GEOSERVER_URL')
# GIS_DATA_GEOSERVER_AUTHKEY = env('GEOSERVER_AUTHKEY')

# # Mapbox Settings
# MAPBOX_ACCESS_TOKEN = env('MAPBOX_ACCESS_TOKEN')
# MAPBOX_URL = env('MAPBOX_URL')
# MAPBOX_ISOCHRONE_URL = env('MAPBOX_ISOCHRONE_URL')

# # Google Settings
# GOOGLE_URL = env('GOOGLE_URL')
# GOOGLE_ACCESS_TOKEN = env('GOOGLE_ACCESS_TOKEN')
# GOOGLE_OAUTH2_CLIENT_ID = env('GOOGLE_OAUTH2_CLIENT_ID')
# GOOGLE_OAUTH2_CLIENT_SECRET = env('GOOGLE_OAUTH2_CLIENT_SECRET')

# # Razorpay Settings
# RAZOR_API_KEY = env('RAZOR_API_KEY')
# RAZOR_SECRET_KEY = env('RAZOR_SECRET_KEY')

# # Here Developer Settings
# DEVELOPERHERE_ACCESS_TOKEN = env('DEVELOPERHERE_ACCESS_TOKEN')
# DEVELOPERHERE_URL = env('DEVELOPERHERE_URL')
# DEVELOPERHERE_ISOCHRONE_URL = env('DEVELOPERHERE_ISOCHRONE_URL')

# # Client URLs
# CLIENT_BASE_URL = env('CLIENT_BASE_URL', default='https://story.mapog.com')
# ANALYSIS_CLIENT_BASE_URL = env('ANALYSIS_CLIENT_BASE_URL')
# GISDATA_CLIENT_BASE_URL = env('GISDATA_CLIENT_BASE_URL')
# CLIENT_STORY_BASE_URL = env('CLIENT_STORY_BASE_URL')

# # OpenAI Settings
# OPEN_AI_API_KEY = env('OPEN_AI_API_KEY')

# # Brevo Settings
# BREVO_API_KEY = env('BREVO_API_KEY')

# # Amazon OpenSearch Settings
# OPEN_SEARCH_GISDATASEARCH__HOST = env('OPEN_SEARCH_HOST')
# OPEN_SEARCH_GISDATASEARCH_MASTER_USER_NAME = env('OPEN_SEARCH_USER')
# OPEN_SEARCH_GISDATASEARCH_MASTER_PASSWORD = env('OPEN_SEARCH_PASSWORD')

# # Open Search Index
# OPEN_SEARCH_INDEX = env('OPEN_SEARCH_INDEX')

# # Zoho credentials
# CLIENT_ID = env('ZOHO_CLIENT_ID')
# CLIENT_SECRET = env('ZOHO_CLIENT_SECRET')
# REFRESH_TOKEN = env('ZOHO_REFRESH_TOKEN')
# CRM_API_URL = env('ZOHO_CRM_API_URL')

# # Brevo credentials 
# BREVO_BASE_URL = env('BREVO_BASE_URL', default='https://api.brevo.com/v3')

# BREAVO_LIST_IDS = {
#     "signup": env.int('BREVO_SIGNUP_LIST_ID', default=9),
#     "gisdata_popup": env.int('BREVO_GISDATA_POPUP_LIST_ID', default=10),
#     "converter_popup": env.int('BREVO_CONVERTER_POPUP_LIST_ID', default=11),
#     "purchased": env.int('BREVO_PURCHASED_LIST_ID', default=12),
#     "grace_period": env.int('BREVO_GRACE_DAYS_LIST_ID', default=74), # Grace Period (15 days) list
#     "map_delete": env.int('BREVO_MAP_DELETE_LIST_ID', default=75), # Map Delete list
# }

# GISDATA_AI_BASEURL = env('GISDATA_AI_BASEURL')
# CONTEXT_WORD_ALLOWED = env.int('CONTEXT_WORD_ALLOWED', default=40)

# # Add these settings for additional security headers
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# # Google configuration
# GOOGLE_REQUEST_COUNT = env.int('GOOGLE_REQUEST_COUNT', default=50)

# # geocode.xyz
# GEOCODE_URL = env('GEOCODE_URL', default='https://geocode.xyz/')
# GEOCODE_ACCESS_TOKEN = env('GEOCODE_ACCESS_TOKEN')

# GEOCODING_REQUESTS = env.list('GEOCODING_REQUESTS', default=[10,10,10])

# # parquet file base path 
# BASE_PATH_PARQUET = env('BASE_PATH_PARQUET', default='uploads/parquet_files/')
# BASE_PATH_MBTILES = env('BASE_PATH_MBTILES', default='uploads/mbTiles/')

# STORY_BUCKET = env('STORY_BUCKET', default='mapstory')

# import os
# from datetime import datetime

# LOGGING_DIR = os.path.join(BASE_DIR, env('LOGGING_DIR', default='logs'))  # Directory to store log files
# if not os.path.exists(LOGGING_DIR):
#     os.makedirs(LOGGING_DIR)

# date = datetime.now().strftime('%Y-%m-%d')

# LOGGING_LEVEL = env('LOGGING_LEVEL', default='DEBUG')  # Set to DEBUG to capture all log levels (DEBUG, INFO, ERROR)

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#             'format': env('LOGGING_FORMAT', default='{levelname} {asctime} {module} {message}'),
#             'style': env('LOGGING_FORMATTER_STYLE', default='{'),
#         },
#     },
#     'handlers': {
#         'day_rotating_file': {
#             'level': LOGGING_LEVEL,
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': os.path.join(LOGGING_DIR, f'{date}.log'),
#             'when': 'midnight',
#             'interval': 1,
#             'backupCount': env.int('LOGGING_BACKUP_COUNT', default=0),
#             'formatter': 'verbose',
#         },
#     },
#     'root': {
#         'handlers': ['day_rotating_file'],
#         'level': LOGGING_LEVEL,
#     },
# }


# CRONJOBS = [
#     ('* * * * *', env('CRON_TASK', default='bearing_angle_app.cron_api.deleteTemporaryBearingProjects')),
#     ('* * * * *', 'pricing_app.cron_jobs.handle_unsubscribed_users'),  # Run daily each minute
# ]

# BREVO_HEADERS = {
#     "api-key": env('BREVO_API_KEY'),
#     "Content-Type": env('BREVO_CONTENT_TYPE', default='application/json')
# }

# print("Current working directory:", os.getcwd())
# print("BASE_DIR:", BASE_DIR)
# print("Environment variables:", os.environ)

# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
#     }
# }

# # JWT Settings
# JWT_SUPERADMIN_SECRET = env('JWT_SUPERADMIN_SECRET', default='superadmin-default-secret-key-change-in-production')
# JWT_USER_SECRET = env('JWT_USER_SECRET', default='user-default-secret-key-change-in-production')
# FRONTEND_URL = env('FRONTEND_URL', default='http://localhost:8100')

# REDIS_CLIENT = redis.Redis(
#     host=env('REDIS_HOST', default='localhost'),
#     port=env('REDIS_PORT', default=6379),
#     decode_responses=True,
#     username=env('REDIS_USER', default='default'),
#     password=env('REDIS_PASSWORD', default='')
# )

# # Geocoding rate limit (using Mapbox)
# GEOCODING_RATE_LIMIT = int(os.environ.get('GEOCODING_RATE_LIMIT', 50))  # Requests per second